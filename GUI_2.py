import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import warnings
import re
from pyvi.ViTokenizer import tokenize
from pyvi import ViTokenizer
from wordcloud import WordCloud

STOP_WORD_FILE = 'vietnamese-stopwords.txt'
teen_code_file = 'teencode.txt'
english_vnmese_file = 'english-vnmese.txt'
wrong_word_file = 'wrong-word.txt'
emoji_file = 'emojicon.txt'

# ƒë·ªçc stopwords (1 t·ª´ m·ªói d√≤ng)
with open(STOP_WORD_FILE, 'a', encoding='utf-8') as f:
        f.write(f'\nkh√°ch_s·∫°n')

with open(STOP_WORD_FILE, 'r', encoding='utf-8') as f:
    stopwords = set([line.strip() for line in f if line.strip()])

def load_dict_from_txt(file_path):
    mapping = {}
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            parts = line.strip().split(",")  # t√°ch theo d·∫•u ph·∫©y
            if len(parts) == 2:
                mapping[parts[0].strip()] = parts[1].strip()
    return mapping

# load c√°c t·ª´ ƒëi·ªÉn thay th·∫ø
teen_dict = load_dict_from_txt(teen_code_file)
en_vi_dict = load_dict_from_txt(english_vnmese_file)
wrong_dict = load_dict_from_txt(wrong_word_file)
emoji_dict = load_dict_from_txt(emoji_file)

def preprocess_text(text, remove_stopwords=True):
    if pd.isna(text):
        return ["unk"]   # fallback cho d·ªØ li·ªáu tr·ªëng

    text = text.lower().strip()

    # thay teen code
    for k, v in teen_dict.items():
        text = re.sub(r'\b{}\b'.format(re.escape(k)), v, text)

    # d·ªãch t·ª´ ti·∫øng Anh sang Vi·ªát
    for k, v in en_vi_dict.items():
        text = re.sub(r'\b{}\b'.format(re.escape(k)), v, text)

    # s·ª≠a ch√≠nh t·∫£
    for k, v in wrong_dict.items():
        text = re.sub(r'\b{}\b'.format(re.escape(k)), v, text)

    # chuy·ªÉn emoji
    for k, v in emoji_dict.items():
        text = text.replace(k, v)

    # b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát & s·ªë
    text = re.sub(r'[^a-zA-Z√Ä-·ªπ\s]', ' ', text)

    # t√°ch t·ª´ b·∫±ng PyVi
    text = ViTokenizer.tokenize(text)

    # t√°ch t·ª´
    tokens = text.split()

    # lo·∫°i stopwords
    if remove_stopwords:
        tokens = [word for word in tokens if word not in stopwords]

    # fallback n·∫øu tokens r·ªóng
    if len(tokens) == 0:
        return ["unk"]

    return tokens

#df['sentiment'] = df.Star.apply(lambda x: 1 if x >=4 else 0)
def plt_word_cloud_tabs(df, hotel_id):
    hotel_df = df[df["Hotel_ID"] == hotel_id].copy()
    hotel_df['Sentiment'] = hotel_df['Score'].apply(lambda x: 1 if x >= 7 else 0)

    positive_reviews = ' '.join(hotel_df[hotel_df['Sentiment'] == 1]['Body'])
    negative_reviews = ' '.join(hotel_df[hotel_df['Sentiment'] == 0]['Body'])

    positive_words = preprocess_text(positive_reviews) if positive_reviews else ["No positive reviews"]
    negative_words = preprocess_text(negative_reviews) if negative_reviews else ["No negative reviews"]

    # Positive
    positive_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(positive_words))
    fig_pos, ax_pos = plt.subplots(figsize=(8, 6))
    ax_pos.imshow(positive_wordcloud, interpolation='bilinear')
    ax_pos.set_title('Positive Reviews')
    ax_pos.axis('off')

    # Negative
    negative_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(negative_words))
    fig_neg, ax_neg = plt.subplots(figsize=(8, 6))
    ax_neg.imshow(negative_wordcloud, interpolation='bilinear')
    ax_neg.set_title('Negative Reviews')
    ax_neg.axis('off')

    return fig_pos, fig_neg


def recommend_hotels(df, hotel_id):
    detail_cols = ['Location', 'Cleanliness', 'Service', 'Facilities', 'Value_for_money']
    
    # ƒêi·ªÉm trung b√¨nh c·ªßa kh√°ch s·∫°n
    hotel_scores = df[df["Hotel_ID"] == hotel_id][detail_cols].mean()
    
    # Trung b√¨nh to√†n b·ªô kh√°ch s·∫°n
    global_avg = df[detail_cols].mean()

    # So s√°nh chi ti·∫øt
    recommendations = []
    for col in detail_cols:
        score = hotel_scores[col]
        avg = global_avg[col]

        if score < avg:
            if col == "Facilities":
                recommendations.append("üèó **C∆° s·ªü v·∫≠t ch·∫•t** d∆∞·ªõi m·ª©c trung b√¨nh ‚Üí C·∫ßn b·∫£o tr√¨ ph√≤ng ·ªëc, c·∫£i thi·ªán ti·ªán √≠ch chung (wifi, thang m√°y...).")
            elif col == "Cleanliness":
                recommendations.append("üßπ **ƒê·ªô s·∫°ch s·∫Ω** ch∆∞a ƒë·∫°t chu·∫©n ‚Üí TƒÉng c∆∞·ªùng ki·ªÉm tra v·ªá sinh ph√≤ng & khu v·ª±c c√¥ng c·ªông.")
            elif col == "Service":
                recommendations.append("üôã **D·ªãch v·ª•** k√©m h∆°n trung b√¨nh ‚Üí ƒê√†o t·∫°o nh√¢n vi√™n v·ªÅ th√°i ƒë·ªô & k·ªπ nƒÉng h·ªó tr·ª£ kh√°ch.")
            elif col == "Value_for_money":
                recommendations.append("üíµ **Gi√° tr·ªã ƒë·ªìng ti·ªÅn** ch∆∞a t·ªët ‚Üí Xem x√©t l·∫°i ch√≠nh s√°ch gi√° & b·ªï sung ∆∞u ƒë√£i.")
            elif col == "Location":
                recommendations.append("üìç **V·ªã tr√≠** kh√¥ng n·ªïi b·∫≠t ‚Üí Cung c·∫•p th√™m d·ªãch v·ª• ƒë∆∞a ƒë√≥n ho·∫∑c h∆∞·ªõng d·∫´n chi ti·∫øt khu v·ª±c xung quanh.")
        else:
            recommendations.append(f"‚úÖ **{col}** t·ªët h∆°n trung b√¨nh ({score:.1f} vs {avg:.1f}).")

    # T·ªïng k·∫øt
    if sum(hotel_scores < global_avg) >= 3:
        summary = "‚ö†Ô∏è Nhi·ªÅu ti√™u ch√≠ d∆∞·ªõi m·ª©c trung b√¨nh. **C·∫ßn c·∫£i thi·ªán ƒë·ªÉ t·ªët h∆°n!** ‚ùå"
    elif sum(hotel_scores > global_avg) >= 3:
        summary = "üëâ Kh√°ch s·∫°n c√≥ nhi·ªÅu ti√™u ch√≠ v∆∞·ª£t m·ª©c trung b√¨nh. **R·∫•t T√¥t, C·ª© th·∫ø m√† ph√°t huy** ‚úÖ"
    else:
        summary = "ü§î ƒêi·ªÉm s·ªë c√¢n b·∫±ng v·ªõi m·ª©c chung. **T·∫°m ·ªïn, nh∆∞ng c·∫ßn c·∫£i thi·ªán ƒë·ªÉ t·ªët h∆°n.**"

    # Xu·∫•t ra Streamlit
    st.subheader("üìù L·ªùi khuy√™n c·∫£i thi·ªán cho kh√°ch s·∫°n")
    for rec in recommendations:
        st.markdown("- " + rec)
    st.info(summary)


# Using menu
st.title("Recommender System")
st.image("agoda.png", width=500)
st.image("agoda2.png", width=500)
menu = ["Home", "Project Understanding", "G·ª£i √ù Kh√°ch S·∫°n", "Hotel Insights"]
choice = st.sidebar.selectbox('Menu', menu)


if choice == 'Home':    
    st.subheader("[Hotel Booking](https://www.agoda.com/?gclsrc=aw.ds&gad_source=1&gad_campaignid=22632286545&gbraid=0AAAAAo6DVViHXFHCbA1gm3eSLklRmqqqt&gclid=Cj0KCQjw5onGBhDeARIsAFK6QJbKYS_CyocdKiR5S-Tc_093efMiiYTCljq30klcCp_pDyuLv22GLRgaAl0rEALw_wcB&cid=1844104&ds=vhWYN3PjCSmcWc8t)")  
elif choice == 'Project Understanding':    
    st.write("""# Tri·ªÉn khai H·ªá th·ªëng G·ª£i √Ω cho Agoda nh·∫±m:

### 1. ƒê·ªÅ xu·∫•t c√°c kh√°ch s·∫°n/resort ph√π h·ª£p nh·∫•t d·ª±a tr√™n l·ªãch s·ª≠ t√¨m ki·∫øm, h√†nh vi ƒë·∫∑t ph√≤ng v√† ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng.

### 2. N√¢ng cao tr·∫£i nghi·ªám kh√°ch h√†ng, c·∫£i thi·ªán t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi ƒë·∫∑t ph√≤ng v√† tƒÉng m·ª©c ƒë·ªô h√†i l√≤ng.

### 3. Cung c·∫•p insights cho ch·ªß kh√°ch s·∫°n bao g·ªìm:

 - Ph√¢n kh√∫c kh√°ch h√†ng (theo ƒë·ªô tu·ªïi, qu·ªëc gia, m·ª•c ƒë√≠ch chuy·∫øn ƒëi).

 - Xu h∆∞·ªõng h√†nh vi ƒë·∫∑t ph√≤ng (th·ªùi ƒëi·ªÉm ƒë·∫∑t, th·ªùi gian l∆∞u tr√∫, lo·∫°i ph√≤ng ∆∞a th√≠ch).

 - T√≥m t·∫Øt ƒë√°nh gi√° & ph·∫£n h·ªìi ch√≠nh t·ª´ kh√°ch h√†ng.

 - D·ª± b√°o nhu c·∫ßu & khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c gi√°/khuy·∫øn m√£i.
             """)
    # hi·ªÉn th·ªã c√°c h√¨nh ·∫£nh li√™n quan ƒë·∫øn ƒë·ªì √°n
    st.image("photo.png", width=400, caption="### CF & CBF")
    st.image("insights.jpg", width=400, caption="### Hybrid")

############################################################################################################3  
#        
elif choice == 'G·ª£i √ù Kh√°ch S·∫°n':
            # function c·∫ßn thi·∫øt
    def get_recommendations(df, hotel_id, cosine_sim, nums=5):
        # Get the index of the hotel that matches the hotel_id
        matching_indices = df.index[df['Hotel_ID'] == hotel_id].tolist()
        if not matching_indices:
            print(f"No hotel found with ID: {hotel_id}")
            return pd.DataFrame()  # Return an empty DataFrame if no match
        idx = matching_indices[0]

        # Get the pairwise similarity scores of all hotels with that hotel
        sim_scores = list(enumerate(cosine_sim[idx]))

        # Sort the hotels based on the similarity scores
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

        # Get the scores of the nums most similar hotels (Ignoring the hotel itself)
        sim_scores = sim_scores[1:nums+1]

        # Get the hotel indices
        hotel_indices = [i[0] for i in sim_scores]

        # Return the top n most similar hotels as a DataFrame
        return df.iloc[hotel_indices]

    # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t ra b·∫£ng
    def display_recommended_hotels(recommended_hotels, cols=5):
        for i in range(0, len(recommended_hotels), cols):
            cols = st.columns(cols)
            for j, col in enumerate(cols):
                if i + j < len(recommended_hotels):
                    hotel = recommended_hotels.iloc[i + j]
                    with col:   
                        st.write(hotel['Hotel_Name'])                    
                        expander = st.expander(f"Description")
                        hotel_description = hotel['Hotel_Description']
                        truncated_description = ' '.join(hotel_description.split()[:100]) + '...'
                        expander.write(truncated_description)
                        expander.markdown("Nh·∫•n v√†o m≈©i t√™n ƒë·ªÉ ƒë√≥ng h·ªôp text n√†y.")   

    def truncate_text(text, max_words=50):
        """
        C·∫Øt m√¥ t·∫£ ch·ªâ l·∫•y t·ªëi ƒëa max_words t·ª´, th√™m "..." n·∫øu qu√° d√†i.
        """
        words = str(text).split()
        if len(words) > max_words:
            return " ".join(words[:max_words]) + " ..."
        return text

    def display_recommendations_markdown(recommendations):
        """
        Hi·ªÉn th·ªã danh s√°ch kh√°ch s·∫°n b·∫±ng markdown, gi·ªõi h·∫°n m√¥ t·∫£ t·ªëi ƒëa 50 t·ª´.
        Th√™m s·ªë th·ª© t·ª± cho t·ª´ng kh√°ch s·∫°n.
        """
        for idx, row in enumerate(recommendations.itertuples(), start=1):
            desc = truncate_text(row.Hotel_Description, max_words=50)
            st.markdown(f"""
            ---
            ### {idx}. üè® {row.Hotel_Name}
            **ID:** {row.Hotel_ID}  
            **M√¥ t·∫£:** {desc}  
            {"‚≠ê **Similarity Score:** {:.4f}".format(row.similar_score) if 'similar_score' in recommendations.columns else ""}
            """, unsafe_allow_html=True)

    # ƒê·ªçc d·ªØ li·ªáu kh√°ch s·∫°n
    df_hotels = pd.read_csv('hotel_info.csv')
    # L·∫•y 20 kh√°ch s·∫°n
    unique_hotels = df_hotels.drop_duplicates(subset=["Hotel_ID"])
    random_hotels = unique_hotels.head(20)

    st.session_state.random_hotels = random_hotels

    # Open and read file to cosine_sim_new
    with open('cosine_sim.pkl', 'rb') as f:
        cosine_sim_new = pickle.load(f)

    ###### Giao di·ªán Streamlit ######
    #st.image('hotel.jpg', use_column_width=True)
    st.image("hotel.jpg", use_container_width=True)

    # Ki·ªÉm tra xem 'selected_hotel_id' ƒë√£ c√≥ trong session_state hay ch∆∞a
    if 'selected_hotel_id' not in st.session_state:
        # N·∫øu ch∆∞a c√≥, thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† None ho·∫∑c ID kh√°ch s·∫°n ƒë·∫ßu ti√™n
        st.session_state.selected_hotel_id = None

    # Theo c√°ch cho ng∆∞·ªùi d√πng ch·ªçn kh√°ch s·∫°n t·ª´ dropdown
    # T·∫°o m·ªôt tuple cho m·ªói kh√°ch s·∫°n, trong ƒë√≥ ph·∫ßn t·ª≠ ƒë·∫ßu l√† t√™n v√† ph·∫ßn t·ª≠ th·ª© hai l√† ID
    hotel_options = [(row['Hotel_Name'], row['Hotel_ID']) for index, row in st.session_state.random_hotels.iterrows()]
    # st.session_state.random_hotels
    # T·∫°o m·ªôt dropdown v·ªõi options l√† c√°c tuple n√†y
    selected_hotel = st.selectbox(
        "Ch·ªçn kh√°ch s·∫°n",
        options=hotel_options,
        format_func=lambda x: x[0]  # Hi·ªÉn th·ªã t√™n kh√°ch s·∫°n
    )
    # Display the selected hotel
    st.write("B·∫°n ƒë√£ ch·ªçn:", selected_hotel)

    # C·∫≠p nh·∫≠t session_state d·ª±a tr√™n l·ª±a ch·ªçn hi·ªán t·∫°i
    st.session_state.selected_hotel_id = selected_hotel[1]

    if st.session_state.selected_hotel_id:
        st.write("Hotel_ID: ", st.session_state.selected_hotel_id)
        # Hi·ªÉn th·ªã th√¥ng tin kh√°ch s·∫°n ƒë∆∞·ª£c ch·ªçn
        selected_hotel = df_hotels[df_hotels['Hotel_ID'] == st.session_state.selected_hotel_id]
        

        if not selected_hotel.empty:
            st.write('#### B·∫°n v·ª´a ch·ªçn:')
            st.write('### ', selected_hotel['Hotel_Name'].values[0])

            hotel_description = selected_hotel['Hotel_Description'].values[0]
            truncated_description = ' '.join(hotel_description.split()[:100])
            st.write('##### Th√¥ng tin:')
            st.write(truncated_description, '...')

            st.write('##### Top 5 kh√°ch s·∫°n kh√°c b·∫°n c≈©ng c√≥ th·ªÉ quan t√¢m:')
            recommendations = get_recommendations(
                df_hotels, 
                st.session_state.selected_hotel_id, 
                cosine_sim=cosine_sim_new, 
                nums=5
            )

            display_recommendations_markdown(recommendations)
 
        else:
            st.write(f"Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n v·ªõi ID: {st.session_state.selected_hotel_id}")


#############################################################################################################
elif choice=='Hotel Insights':
    st.write("##### Hotel Insights")
    st.write("##### List Hotels")
    # T·∫°o dataframe hi·ªÉn th·ªã danh s√°ch kh√°ch s·∫°n
    df = pd.read_csv('hotel_info_temp.csv', index_col=False)

    st.title("Danh s√°ch kh√°ch s·∫°n")

    # Hi·ªÉn th·ªã danh s√°ch kh√°ch s·∫°n trong selectbox
    hotel_choice = st.selectbox("Ch·ªçn m·ªôt kh√°ch s·∫°n:", df['Hotel_Name'].unique())

    # L·ªçc th√¥ng tin kh√°ch s·∫°n ƒë√£ ch·ªçn
    selected_hotel = df[df['Hotel_Name'] == hotel_choice].iloc[0]

    # In ra th√¥ng tin chi ti·∫øt
    st.subheader("üè® Th√¥ng tin chi ti·∫øt kh√°ch s·∫°n")
    st.write(f"üÜî **ID:** {selected_hotel['Hotel_ID']}")
    st.write(f"üìõ **T√™n:** {selected_hotel['Hotel_Name']}")
    st.write(f"üìç **ƒê·ªãa ch·ªâ:** {selected_hotel['Hotel_Address']}")
    st.write(f"‚≠ê **ƒêi·ªÉm s·ªë:** {selected_hotel['Total_Score']}")
    st.write(f"üèÖ **H·∫°ng sao:** {selected_hotel['Hotel_Rank']}")
        # hotel_id l√† ID kh√°ch s·∫°n b·∫°n ch·ªçn ·ªü selectbox/slider v.v.
    hotel_df = df[df["Hotel_ID"] == selected_hotel['Hotel_ID']]
    st.subheader("Reviewer theo qu·ªëc gia")
    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(18, 6))  # d√πng fig, ax thay v√¨ plt tr·ª±c ti·∫øp
    nationality_counts = hotel_df["Nationality"].value_counts()

    sns.barplot(x=nationality_counts.index, y=nationality_counts.values, ax=ax)
    ax.set_title("Reviewer Nationalities")
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)

    # Hi·ªÉn th·ªã tr√™n Streamlit
    st.pyplot(fig)
    

    def plt_comment_score_month(df, hotel_id):
        # L·ªçc theo Hotel_ID v√† nƒÉm >= 2023
        hotel_df = df[(df["Hotel_ID"] == hotel_id) & (df["Year"] >= 2023)]

        # Groupby ƒë·ªÉ t√≠nh s·ªë l∆∞·ª£ng review v√† ƒëi·ªÉm trung b√¨nh
        monthly_stats = (
            hotel_df.groupby(["Year", "Month"])
            .agg(Review_Count=("Reviewer_ID", "count"),
                Avg_Score=("Score", "mean"))
            .reset_index()
        )

        # T·∫°o c·ªôt YearMonth d·∫°ng datetime chu·∫©n
        monthly_stats["YearMonth"] = pd.to_datetime(
            monthly_stats["Year"].astype(int).astype(str) + "-" +
            monthly_stats["Month"].astype(int).astype(str).str.zfill(2) + "-01",
            format="%Y-%m-%d"
        )

        fig, ax1 = plt.subplots(figsize=(14, 6))

        # V·∫Ω bar
        ax1.bar(
            monthly_stats["YearMonth"],
            monthly_stats["Review_Count"],
            color="skyblue", width=20
        )
        ax1.set_ylabel("Number of Reviews", color="blue")
        ax1.tick_params(axis="y", labelcolor="blue")

        # V·∫Ω lineplot
        ax2 = ax1.twinx()
        sns.lineplot(
            data=monthly_stats,
            x="YearMonth", y="Avg_Score",
            marker="o", color="red", linewidth=2, ax=ax2
        )
        ax2.set_ylabel("Average Score", color="red")
        ax2.tick_params(axis="y", labelcolor="red")

        ax1.set_xlabel("Time (Month)")
        plt.title(f"Hotel {hotel_id} - Reviews & Average Score (2023‚Äì2024)")
        plt.xticks(rotation=45)

        plt.tight_layout()

        return fig   # tr·∫£ v·ªÅ fig thay v√¨ plt.show()
    st.subheader("S·ªë l∆∞·ª£ng review v√† ƒëi·ªÉm trung b√¨nh theo th√°ng")
    # ƒê·ªçc d·ªØ li·ªáu review
    fig = plt_comment_score_month(df, hotel_id=selected_hotel['Hotel_ID'])
    st.pyplot(fig)

    def plt_detail_score(df, hotel_id):
        hotel_df = df[df["Hotel_ID"] == hotel_id]

        # c√°c c·ªôt chi ti·∫øt
        detail_cols = ['Location', 'Cleanliness', 'Service', 'Facilities', 'Value_for_money']

        # trung b√¨nh theo kh√°ch s·∫°n c·ª• th·ªÉ
        detail_scores = hotel_df[detail_cols].mean()

        # trung b√¨nh to√†n b·ªô kh√°ch s·∫°n
        global_avg = df[detail_cols].mean()


        # v·∫Ω bar chart
        fig, ax = plt.subplots(figsize=(8, 5))
        detail_scores.plot(kind='bar', color='skyblue', ax=ax, label=f'Hotel {hotel_id}')

        # v·∫Ω line c·ªßa trung b√¨nh to√†n b·ªô
        ax.plot(global_avg.values, color='red', marker='o', linestyle='--', label='Global Average')

        ax.set_title(f'Average Score by Detail (Hotel {hotel_id}) vs Global')
        ax.set_xlabel('Detail')
        ax.set_ylabel('Average Score')
        ax.set_xticks(range(len(detail_cols)))
        ax.set_xticklabels(detail_cols, rotation=45)
        ax.set_ylim(0, 10)  # thang ƒëi·ªÉm 0-10
        ax.legend()
        return fig
    st.subheader("ƒêi·ªÉm chi ti·∫øt so v·ªõi trung b√¨nh to√†n b·ªô kh√°ch s·∫°n")
    fig = plt_detail_score(df, hotel_id=selected_hotel['Hotel_ID'])
    st.pyplot(fig)

    # ƒë√°nh gi√° t√≠ch c·ª±c v√† ti√™u c·ª±c
    st.subheader("ƒê√°nh gi√° t√≠ch c·ª±c v√† ti√™u c·ª±c")
    
    # T·∫°o v√† hi·ªÉn th·ªã word cloud
        
    positive_fig, negative_fig = plt_word_cloud_tabs(df, hotel_id=selected_hotel['Hotel_ID'])

    tab1, tab2 = st.tabs(["ƒêi·ªÉm M·∫°nh", "C·∫ßn C·∫£i Thi·ªán"])

    with tab1:
        st.pyplot(positive_fig)

    with tab2:
         st.pyplot(negative_fig)
         
    recommend_hotels(df, hotel_id=selected_hotel['Hotel_ID'])


        
        

    



